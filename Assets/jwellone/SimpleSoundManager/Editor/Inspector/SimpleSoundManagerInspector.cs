using System.Collections.Generic;
using System.Reflection;
using System.Text;
using UnityEngine;
using UnityEditor;
using jwellone;

#nullable enable

namespace jwelloneEditor
{
    [CustomEditor(typeof(SimpleSoundManager))]
    public class SimpleSoundManagerInspector : Editor
    {
        const string _fileName = "SoundGroupConst.autogenerated.cs";
        static readonly string _outputPath = $"Assets/{_fileName}";

        bool isRegisteredAudioClipsFoldout = true;
        SerializedProperty? _masterVolumeProperty;
        SerializedProperty? _groupsProperty;

        void OnEnable()
        {
            _masterVolumeProperty = serializedObject.FindProperty("_masterVolume");
            _groupsProperty = serializedObject.FindProperty("_soundGroupArray");
        }

        public override void OnInspectorGUI()
        {
            serializedObject.Update();

            var instance = (SimpleSoundManager)target;

            if (GUILayout.Button("Output SoundGroupConst.autogenerated.cs"))
            {
                var soundGroups = instance.gameObject.GetComponentsInChildren<SoundGroup>(true);
                OutputSoundGroupConst(soundGroups);
            }

            EditorGUILayout.Space();
            EditorGUILayout.PropertyField(_masterVolumeProperty);

            EditorGUILayout.Space();
            EditorGUILayout.PropertyField(_groupsProperty);

            var audioClipsField = instance.GetType().GetField("_audioClips", BindingFlags.Instance | BindingFlags.NonPublic);
            if (audioClipsField != null)
            {
                var dicAudioClips = audioClipsField.GetValue(instance) as Dictionary<string, RegisteredAudioClip>;
                if (dicAudioClips != null)
                {
                    EditorGUILayout.Space();
                    isRegisteredAudioClipsFoldout = EditorGUILayout.Foldout(isRegisteredAudioClipsFoldout, "Registered audio clips");
                    if (isRegisteredAudioClipsFoldout)
                    {
                        EditorGUI.BeginDisabledGroup(true);
                        foreach (var reference in dicAudioClips.Values)
                        {
                            var clip = reference.clip!;
                            EditorGUILayout.BeginHorizontal();
                            EditorGUILayout.ObjectField(clip, clip.GetType(), false);
                            EditorGUILayout.TextField("", reference.registeredCount.ToString(), GUILayout.Width(32));
                            EditorGUILayout.EndHorizontal();
                        }
                        EditorGUI.EndDisabledGroup();
                    }
                }
            }

            serializedObject.ApplyModifiedProperties();
        }

        static void OutputSoundGroupConst(IList<SoundGroup> soundGroups)
        {
            var sb = new StringBuilder();
            sb.AppendLine("public static partial class SoundGroupConst");
            sb.AppendLine("{");

            foreach (var group in soundGroups)
            {
                var groupName = group.name;
                sb.AppendLine($"\tpublic static readonly string {groupName.ToUpper()} = \"{groupName}\";");
            }

            sb.Append("}");

            SoundConstGenerator.Write(_outputPath, sb.ToString());
        }
    }
}